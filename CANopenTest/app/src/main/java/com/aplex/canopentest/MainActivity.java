package com.aplex.canopentest;

import android.app.AlertDialog;
import android.app.ProgressDialog;
import android.app.Service;
import android.content.ComponentName;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.ServiceConnection;
import android.os.Handler;
import android.os.IBinder;
import android.os.Looper;
import android.os.RemoteException;
import android.os.SystemClock;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.EditText;
import android.widget.ListView;
import android.widget.Switch;
import android.widget.TextView;

import java.util.ArrayList;
import java.util.List;
import com.aplex.canopenboot.IRemoteService;

public class MainActivity extends AppCompatActivity  implements View.OnClickListener, CANopenContract.IbaseView{

    private String TAG = "MainActivity";

    Switch mToggle;
    Button mStop;
    TextView mnodeID;
    TextView baudRateID;
    TextView mtotalSendCnt;
    TextView mtotalRecvCnt;
    Button mSend;
    Button mSendClear;
    Button mRecvClear;
    EditText mInterval;
    EditText mCount;
    EditText mdata1;
    EditText mdata2;
    ListView mSendView;
    ListView mRecvView;
    SendAdapter sendAdapter;
    RecvAdapter recvAdapter;
    ProgressDialog mProgressDialog;
    CANopenPresenter presenter = new CANopenPresenter();

    int interval;
    int count;
    int data1;
    int data2;
    boolean ifOpen;
    int baudRate;
    int nodeID;

    List<CANopenPresenter.DataFrame> mDatasendFrame = new ArrayList<CANopenPresenter.DataFrame>();
    List<CANopenPresenter.DataFrame> mDatarecvFrame = new ArrayList<CANopenPresenter.DataFrame>();

    IRemoteService remoteService;

    ServiceConnection sc = new ServiceConnection() {
        @Override
        public void onServiceConnected(ComponentName componentName, IBinder iBinder) {
            Log.d(TAG, "onServiceConnected");
            remoteService = IRemoteService.Stub.asInterface(iBinder);
            try {
                ifOpen = remoteService.getCANopenStatus();
                baudRate = remoteService.getDeviceBaudRate();
                nodeID = remoteService.getDeviceNodeID();

            } catch (RemoteException e) {
                e.printStackTrace();
            }
            new Handler(Looper.getMainLooper()).post(new Runnable() {
                @Override
                public void run() {
                    mnodeID.setText(String.valueOf(nodeID));
                    baudRateID.setText(String.valueOf(baudRate));
                }
            });
        }

        @Override
        public void onServiceDisconnected(ComponentName componentName) {
            Log.d(TAG, "onServiceDisconnected");
            remoteService = null;
        }
    };

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);
        presenter.initPresenter(this);
        //拿到控件
        initView();
        //初始化数据
        initData();
        //启动监听
        initListener();
    }

    private void initView(){
        mToggle = findViewById(R.id.ToggleID);
        mStop = findViewById(R.id.stopID);
        mInterval = findViewById(R.id.intervalID);
        mnodeID = findViewById(R.id.nodeID);
        baudRateID = findViewById(R.id.baudRateID);
        mSend = findViewById(R.id.sendID);
        mCount = findViewById(R.id.cntID);
        mdata1 = findViewById(R.id.data1ID);
        mdata2 = findViewById(R.id.data2ID);
        mSendClear = findViewById(R.id.sendClearID);
        mRecvClear = findViewById(R.id.recvClearID);
        mSendView = findViewById(R.id.canSendInfoID);
        mRecvView = findViewById(R.id.canRecvInfoID);
        mtotalSendCnt = findViewById(R.id.totalsendCnt);
        mtotalRecvCnt = findViewById(R.id.totalrecvCnt);
        mProgressDialog = new ProgressDialog(this);
    }

    private void initData(){

        interval = SPUtils.getInt(MainActivity.this, "intervalValue", 500);
        mInterval.setText(String.valueOf(interval));
        count = SPUtils.getInt(MainActivity.this, "countValue", 1);
        mCount.setText(String.valueOf(count));
        data1 = SPUtils.getInt(MainActivity.this, "data1Value", 0);
        mdata1.setText(String.valueOf(data1));
        data2 = SPUtils.getInt(MainActivity.this, "data2Value", 0);
        mdata2.setText(String.valueOf(data2));

        sendAdapter = new SendAdapter();
        mSendView.setAdapter(sendAdapter);

        recvAdapter = new RecvAdapter();
        mRecvView.setAdapter(recvAdapter);

        presenter.clearSendCnt();
        presenter.clearRecvCnt();
        //从启动应用里面拿到波特率和节点号
        Intent it = new Intent();
        it.setAction("android.intent.action.CANopenRemoteService");
        it.setPackage("com.aplex.canopenboot");
        if(bindService(it, sc, Service.BIND_AUTO_CREATE)==true){
            //成功
        }
        else{
            //失败
            mnodeID.setText(String.valueOf(-1));
            baudRateID.setText(String.valueOf(-1));
       }
    }

    private void initListener(){
        mStop.setOnClickListener(this);
        mSend.setOnClickListener(this);
        mSendClear.setOnClickListener(this);
        mRecvClear.setOnClickListener(this);

        mToggle.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() {
            @Override
            public void onCheckedChanged(CompoundButton compoundButton, boolean b) {

                if(mToggle.isChecked()==true){
                    clearSendData();
                    clearRecvData();
                    mProgressDialog.setProgressStyle(ProgressDialog.STYLE_SPINNER);
                    mProgressDialog.setCancelable(false);
                    mProgressDialog.setCanceledOnTouchOutside(false);
                    mProgressDialog.setIcon(R.mipmap.ic_launcher);
                    mProgressDialog.setTitle("提示");
                    mProgressDialog.setMessage("正在开启CANopen调试模式");
                    mProgressDialog.show();

                    presenter.startTest();
                    new Thread(new Runnable() {
                        @Override
                        public void run() {
                            // TODO Auto-generated method stub
                            try {
                                Thread.sleep(3000);
                                mProgressDialog.cancel();
                                presenter.startRecvdata();
                            } catch (InterruptedException e) {
                                // TODO Auto-generated catch block
                                e.printStackTrace();
                            }
                        }
                    }).start();

                }else{
                    presenter.stopTest();
                }
            }
        });
    }

    class SendAdapter extends BaseAdapter{

        @Override
        public int getCount() {
            return mDatasendFrame.size();
        }

        @Override
        public Object getItem(int i) {
            return null;
        }

        @Override
        public long getItemId(int i) {
            return i;
        }

        @Override
        public View getView(int i, View convertView, ViewGroup viewGroup) {
            TextView index = null;
            TextView data1 = null;
            TextView data2 = null;
            //Context context, int resource, ViewGroup root
            View view = convertView;
            if(view==null){
                view = View.inflate(MainActivity.this, R.layout.activity_list_item, null);
            }

            index = view.findViewById(R.id.itemIndex);
            data1 = view.findViewById(R.id.data1);
            data2 = view.findViewById(R.id.data2);
            CANopenPresenter.DataFrame dataFrame =mDatasendFrame.get(i);
//            Log.d(TAG,"index="+dataFrame.index);
//            Log.d(TAG,"data1="+dataFrame.data1);
//            Log.d(TAG,"data2="+dataFrame.data2);
            index.setText(String.valueOf(dataFrame.index));
            data1.setText(dataFrame.data1);
            data2.setText(dataFrame.data2);
            return view;
        }
    }

    class RecvAdapter extends BaseAdapter{

        @Override
        public int getCount() {
            return mDatarecvFrame.size();
        }

        @Override
        public Object getItem(int i) {
            return null;
        }

        @Override
        public long getItemId(int i) {
            return i;
        }

        @Override
        public View getView(int i, View convertView, ViewGroup viewGroup) {
            TextView index = null;
            TextView data1 = null;
            TextView data2 = null;
            //Context context, int resource, ViewGroup root
            View view = convertView;
            if(view==null){
                view = View.inflate(MainActivity.this, R.layout.activity_list_item, null);
            }

            index = view.findViewById(R.id.itemIndex);
            data1 = view.findViewById(R.id.data1);
            data2 = view.findViewById(R.id.data2);
            CANopenPresenter.DataFrame dataFrame =mDatarecvFrame.get(i);
//            Log.d(TAG,"index="+dataFrame.index);
//            Log.d(TAG,"data1="+dataFrame.data1);
//            Log.d(TAG,"data2="+dataFrame.data2);
            index.setText(String.valueOf(dataFrame.index));
            data1.setText(dataFrame.data1);
            data2.setText(dataFrame.data2);
            return view;
        }
    }
    void clearSendData(){
        mDatasendFrame.clear();
        presenter.clearSendCnt();
        sendAdapter.notifyDataSetChanged();
        mtotalSendCnt.setText(String.valueOf(presenter.getSendCnt()));
    }

    void clearRecvData(){
        mDatarecvFrame.clear();
        recvAdapter.notifyDataSetChanged();
        presenter.clearRecvCnt();
        mtotalRecvCnt.setText(String.valueOf(presenter.getRecvCnt()));
    }
    @Override
    public void onClick(View view) {

        switch (view.getId()){
//            case R.id.stopID:     //关闭调试模式
//                presenter.stopTest();
//                break;
            case R.id.sendID:     //发送数据
                if(mToggle.isChecked()==true){
                    count = Integer.valueOf(mCount.getText().toString());
                    interval = Integer.valueOf(mInterval.getText().toString());
                    data1 = Integer.valueOf(mdata1.getText().toString());
                    data2 = Integer.valueOf(mdata2.getText().toString());
                    presenter.sendData(count, String.valueOf(data1), String.valueOf(data2), interval);
                }

                break;
            case R.id.sendClearID:
                clearSendData();
                break;

            case R.id.recvClearID:
                clearRecvData();
                break;
        }
    }

    @Override
    public void listSendShow(CANopenPresenter.DataFrame dataFrame) {
        if(mDatasendFrame!=null){
            mDatasendFrame.add(dataFrame);
        }
        sendAdapter.notifyDataSetChanged();
        mSendView.setSelection(mDatasendFrame.size());
        mtotalSendCnt.setText(String.valueOf(presenter.getSendCnt()));
    }

    @Override
    public void listRecvShow(CANopenPresenter.DataFrame dataFrame) {
        if(mDatarecvFrame!=null){
            mDatarecvFrame.add(dataFrame);
        }
        recvAdapter.notifyDataSetChanged();
        mRecvView.setSelection(mDatarecvFrame.size());
        mtotalRecvCnt.setText(String.valueOf(presenter.getRecvCnt()));
    }

    @Override
    public void showError(String str) {
//        final ProgressDialog dialog = ProgressDialog.show(this, null, str);
        AlertDialog.Builder builder = new AlertDialog.Builder(this);
        builder.setTitle("错误");
        builder.setMessage(str);
        builder.setPositiveButton("确认键", new DialogInterface.OnClickListener() {
            @Override
            public void onClick(DialogInterface dialog, int which) {
            }
        });

//        builder.setNegativeButton("取消键", new DialogInterface.OnClickListener() {
//            @Override
//            public void onClick(DialogInterface dialog, int which) {
//                Toast.makeText(context, "你已选择取消键", Toast.LENGTH_SHORT).show();
//            }
//        });
        builder.show();
//        //让 在子线程中睡    3 秒钟
//        new Thread(){
//            public void run() {
//                SystemClock.sleep(3000);
////                dialog.dismiss();
//            };
//        }.start();

    }
}
