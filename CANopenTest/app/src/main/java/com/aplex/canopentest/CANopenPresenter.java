package com.aplex.canopentest;

import android.os.Handler;
import android.os.Looper;
import android.os.SystemClock;
import android.util.Log;

import java.text.DecimalFormat;
import java.text.Format;
import java.util.ArrayDeque;
import java.util.Queue;

import static android.content.ContentValues.TAG;

/**
 * Created by aplex on 2018/3/21.
 */

public class CANopenPresenter implements CANopenContract.IbasePresenter {
    private String TAG = "CANopenPresenter";

    CANopenContract.IbaseView view;
    CANopenContract.IbaseModel model;
    private int recvCnt;
    private int sendCnt;
    private int data1;
    private int data2;
    Thread mRecvThread;
    boolean recvRunFlag;
    boolean startRecv = false;
    int pipe_fd;
    Queue<DataFrame> sendQueue = new ArrayDeque<DataFrame>();
    Queue<DataFrame> recvQueue = new ArrayDeque<DataFrame>();

    public class DataFrame{
        int index;
        String data1;
        String data2;
        DataFrame(int index, String data1, String data2){
            this.index = index;
            this.data1 = data1;
            this.data2 = data2;
        }
    }
    @Override
    public void initPresenter(CANopenContract.IbaseView view) {
        this.view = view;
        model = new CANopeModel();
    }
    @Override
    public void sendData(final int cnt, final String Data1, final String Data2, final int interval){


        new Thread(new Runnable() {
                @Override
                public void run() {
                    int sendInterval = interval;
                    int currentSendCnt = cnt;
                    Format fm = new DecimalFormat("00");
                    data1 = Integer.valueOf(Data1);
                    data2 = Integer.valueOf(Data2);
                    model.setDataValue(data1, data2);

                    for(int i=0;i <currentSendCnt;i++){

                        model.sendData();   //发送数据
                        sendQueue.add(new DataFrame(++sendCnt, fm.format(data1), fm.format(data2)));
                        data2++;
                        if(data2==100){
                            data2=0;
                            data1= (++data1)%100;
                        }
                        model.setDataValue(data1, data2);

                        try {
                            Thread.sleep(sendInterval);
                        } catch (InterruptedException e) {
                            e.printStackTrace();
                        }

                        //打印在屏幕上
                        new Handler(Looper.getMainLooper()).post(new Runnable() {
                            @Override
                            public void run() {
                                view.listSendShow(sendQueue.poll());
                            }
                        });
                    }
                }
            }).start();
    }


    @Override
    public String readNodeID() {
        String tmp =  model.readNodeID();

        if(tmp.contains("ERROR")){
            tmp = "-1";
        }
        return tmp;
    }

    @Override
    public String readBaudRate() {
        return "0";
    }

    @Override
    public void startTest() {
        model.startTest();
    }

    @Override
    public void stopTest() {
        if(mRecvThread!=null){
            mRecvThread.interrupt();
        }
        model.stopTest();
        model.canopenFifoClose(pipe_fd);
        recvRunFlag = false;
        startRecv = false;
    }


    @Override
    public void startRecvdata() {
        final String fifoName = "/dev/canopen_fifo";
        recvRunFlag=true;
        startTest();
//        SystemClock.sleep(3000);
        if(startRecv==false){
            //启动接收，在canopen协议中创建socket
//            model.startRecvTest();
            startRecv=true;
        }
//        SystemClock.sleep(3000);
        //开启接收线程
        mRecvThread = new Thread(new Runnable() {
            @Override
            public void run() {
                Format fm = new DecimalFormat("00");
                //在这里会阻塞
                pipe_fd = model.canopenFifoOpen(fifoName);
                if(pipe_fd==-1){
                    return;
                }
                while (recvRunFlag==true){

                    byte[] buff = model.canopenFifoRead(pipe_fd);
                    Log.d(TAG, "4444 buff[0]="+buff[0]);
                    String sbuff0 = String.valueOf(buff[0]);
                    if(sbuff0=="-1"){
                        continue;
                    }
                    String sbuff1 = String.valueOf(buff[1]);
                    Log.d(TAG, "buff0="+sbuff0);
                    Log.d(TAG, "buff1="+sbuff1);
                    recvQueue.add(new DataFrame(++recvCnt, fm.format(Integer.valueOf(sbuff0)), fm.format(Integer.valueOf(sbuff1))));
                    //打印在屏幕上
                    new Handler(Looper.getMainLooper()).post(new Runnable() {
                        @Override
                        public void run() {
                            view.listRecvShow(recvQueue.poll());
                        }
                    });
                }
                model.canopenFifoClose(pipe_fd);
            }
        });
        mRecvThread.start();
    }

    @Override
    public void clearSendCnt() {
        sendCnt = 0;
    }

    @Override
    public void clearRecvCnt() {
        recvCnt = 0;
    }

    @Override
    public int getSendCnt() {
        return sendCnt;
    }

    @Override
    public int getRecvCnt() {
        return recvCnt;
    }
}
